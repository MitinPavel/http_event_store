pub mod write {
    use serde_json;
    use uuid::Uuid;

    #[derive(Serialize, Deserialize, Debug)]
    pub struct Event {
        #[serde(rename = "eventId")]
        pub event_id: Uuid,
        #[serde(rename = "eventType")]
        pub event_type: String,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub data: Option<serde_json::Value>
    }
}

pub mod read {
    use serde_json;
    use uuid::Uuid;
    use chrono::{DateTime, UTC};
    use std::collections::BTreeMap;

    #[derive(Serialize, Deserialize, Debug)]
    pub struct Stream {
        pub author: serde_json::Value,
        #[serde(rename = "eTag")]
        pub e_tag: Option<String>,
        pub entries: Vec<Entry>,
        #[serde(rename = "headOfStream")]
        pub head_of_stream: bool,
        pub id: String,
        pub links: Vec<BTreeMap<String, String>>,
        #[serde(rename = "selfUrl")]
        pub self_url: Option<String>,
        #[serde(rename = "streamId")]
        pub stream_id: String,
        pub title: String,
        pub updated: DateTime<UTC>
    }

    #[derive(Serialize, Deserialize, Debug)]
    pub struct Entry {
        #[serde(rename = "eventId")]
        pub event_id: Uuid,
        #[serde(rename = "eventType")]
        pub event_type: String,
        pub data: Option<serde_json::Value>,

        #[serde(rename = "eventNumber")]
        pub event_number: u64
    }
}

//"author":{"name":"EventStore"},
//"eTag":"0;248368668",
//"entries":[{"author":{"name":"EventStore"},
//    "data":"{\n  \"a\": \"1\"\n}",
//    "eventId":"fbf4a1a1-b4a3-4dfe-a01f-ec52c34e16e4",
//    "eventNumber":0,
//    "eventType": "event-type",
//    "id":"http://127.0.0.1:2113/streams/newstream/0",
//    "isJson":true,
//    "isLinkMetaData":false,
//    "isMetaData":false,
//    "links":[
//      {"relation":"edit","uri":"http://127.0.0.1:2113/streams/newstream/0"},
//      {"relation":"alternate","uri":"http://127.0.0.1:2113/streams/newstream/0"}],
//    "positionEventNumber":0,
//    "positionStreamId":"newstream",
//    "streamId":"newstream",
//    "summary":"event-type",
//    "title":"0@newstream",
//    "updated":"2016-09-06T18:14:50.042706Z"}],
//"headOfStream":true,
//"id":"http://127.0.0.1:2113/streams/newstream",
//"links":[
//    {"relation":"self","uri":"http://127.0.0.1:2113/streams/newstream"},
//    {"relation":"first","uri":"http://127.0.0.1:2113/streams/newstream/head/backward/20"},
//    {"relation":"previous","uri":"http://127.0.0.1:2113/streams/newstream/1/forward/20"},
//    {"relation":"metadata","uri":"http://127.0.0.1:2113/streams/newstream/metadata"}],
//"selfUrl":"http://127.0.0.1:2113/streams/newstream",
//"streamId":"newstream",
//"title":"Event stream 'newstream'",
// "updated":"2016-09-06T18:14:50.042706Z"
