pub mod write {
    use serde_json;
    use uuid::Uuid;

    #[derive(Serialize, Deserialize, Debug)]
    pub struct Event {
        #[serde(rename = "eventId")]
        pub event_id: Uuid,
        #[serde(rename = "eventType")]
        pub event_type: String,
        #[serde(skip_serializing_if = "Option::is_none")]
        pub data: Option<serde_json::Value>,
    }
}

pub mod read {
    use serde_json;
    use uuid::Uuid;
    use url::Url;
    use chrono::{DateTime, UTC};
    use std::collections::BTreeMap;

    #[derive(Serialize, Deserialize, Debug)]
    pub struct Stream<E> {
        pub author: BTreeMap<String, String>,
        #[serde(rename = "eTag")]
        pub e_tag: Option<String>,
        pub entries: Vec<E>,
        #[serde(rename = "headOfStream")]
        pub head_of_stream: bool,
        pub id: Url,
        pub links: Vec<Link>,
        #[serde(rename = "selfUrl")]
        pub self_url: Option<String>,
        #[serde(rename = "streamId")]
        pub stream_id: String,
        pub title: String,
        pub updated: DateTime<UTC>,
    }

    #[derive(Serialize, Deserialize, Debug)]
    pub struct Entry {
        pub author: BTreeMap<String, String>,
        pub data: Option<serde_json::Value>,
        #[serde(rename = "eventId")]
        pub event_id: Uuid,
        #[serde(rename = "eventNumber")]
        pub event_number: i32,
        #[serde(rename = "eventType")]
        pub event_type: String,
        pub id: Url,
        #[serde(rename = "isJson")]
        pub is_json: bool,
        #[serde(rename = "isLinkMetaData")]
        pub is_link_meta_data: bool,
        #[serde(rename = "isMetaData")]
        pub is_meta_data: bool,
        pub links: Vec<Link>,
        #[serde(rename = "positionEventNumber")]
        pub position_event_number: i32,
        #[serde(rename = "positionStreamId")]
        pub position_stream_id: String,
        #[serde(rename = "streamId")]
        pub stream_id: String,
        #[serde(rename = "summary")]
        pub summary: String,
        pub title: String,
        pub updated: DateTime<UTC>,
    }

    #[derive(Serialize, Deserialize, Debug)]
    pub struct Link {
        pub relation: String,
        pub uri: Url,
    }
}
